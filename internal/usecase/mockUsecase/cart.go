// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interface/cart.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	response "main.go/internal/common/response"
)

// MockCartUseCase is a mock of CartUseCase interface.
type MockCartUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCartUseCaseMockRecorder
}

// MockCartUseCaseMockRecorder is the mock recorder for MockCartUseCase.
type MockCartUseCaseMockRecorder struct {
	mock *MockCartUseCase
}

// NewMockCartUseCase creates a new mock instance.
func NewMockCartUseCase(ctrl *gomock.Controller) *MockCartUseCase {
	mock := &MockCartUseCase{ctrl: ctrl}
	mock.recorder = &MockCartUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartUseCase) EXPECT() *MockCartUseCaseMockRecorder {
	return m.recorder
}

// AddToCart mocks base method.
func (m *MockCartUseCase) AddToCart(productId, usersId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToCart", productId, usersId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToCart indicates an expected call of AddToCart.
func (mr *MockCartUseCaseMockRecorder) AddToCart(productId, usersId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCart", reflect.TypeOf((*MockCartUseCase)(nil).AddToCart), productId, usersId)
}

// CreateCart mocks base method.
func (m *MockCartUseCase) CreateCart(Id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCart", Id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCart indicates an expected call of CreateCart.
func (mr *MockCartUseCaseMockRecorder) CreateCart(Id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCart", reflect.TypeOf((*MockCartUseCase)(nil).CreateCart), Id)
}

// ListCart mocks base method.
func (m *MockCartUseCase) ListCart(userId int) (response.ViewCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCart", userId)
	ret0, _ := ret[0].(response.ViewCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCart indicates an expected call of ListCart.
func (mr *MockCartUseCaseMockRecorder) ListCart(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCart", reflect.TypeOf((*MockCartUseCase)(nil).ListCart), userId)
}

// RemoveFromCart mocks base method.
func (m *MockCartUseCase) RemoveFromCart(productId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCart", productId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockCartUseCaseMockRecorder) RemoveFromCart(productId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockCartUseCase)(nil).RemoveFromCart), productId, userId)
}
