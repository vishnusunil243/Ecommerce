// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interface/user.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	helperStruct "main.go/internal/common/helperStruct"
	response "main.go/internal/common/response"
)

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// AddAdress mocks base method.
func (m *MockUserUseCase) AddAdress(id int, address helperStruct.Address) (response.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdress", id, address)
	ret0, _ := ret[0].(response.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAdress indicates an expected call of AddAdress.
func (mr *MockUserUseCaseMockRecorder) AddAdress(id, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdress", reflect.TypeOf((*MockUserUseCase)(nil).AddAdress), id, address)
}

// ChangePassword mocks base method.
func (m *MockUserUseCase) ChangePassword(id int, password helperStruct.UpdatePassword) (response.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", id, password)
	ret0, _ := ret[0].(response.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserUseCaseMockRecorder) ChangePassword(id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserUseCase)(nil).ChangePassword), id, password)
}

// DeleteAddress mocks base method.
func (m *MockUserUseCase) DeleteAddress(addressId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", addressId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockUserUseCaseMockRecorder) DeleteAddress(addressId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockUserUseCase)(nil).DeleteAddress), addressId, userId)
}

// ForgotPassword mocks base method.
func (m *MockUserUseCase) ForgotPassword(newpassword helperStruct.ForgotPassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", newpassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockUserUseCaseMockRecorder) ForgotPassword(newpassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockUserUseCase)(nil).ForgotPassword), newpassword)
}

// ListAllAddresses mocks base method.
func (m *MockUserUseCase) ListAllAddresses(userId int) ([]response.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllAddresses", userId)
	ret0, _ := ret[0].([]response.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllAddresses indicates an expected call of ListAllAddresses.
func (mr *MockUserUseCaseMockRecorder) ListAllAddresses(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllAddresses", reflect.TypeOf((*MockUserUseCase)(nil).ListAllAddresses), userId)
}

// UpdateAddress mocks base method.
func (m *MockUserUseCase) UpdateAddress(userId, addressId int, address helperStruct.Address) (response.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", userId, addressId, address)
	ret0, _ := ret[0].(response.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserUseCaseMockRecorder) UpdateAddress(userId, addressId, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserUseCase)(nil).UpdateAddress), userId, addressId, address)
}

// UpdateEmail mocks base method.
func (m *MockUserUseCase) UpdateEmail(userId int, email string) (response.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", userId, email)
	ret0, _ := ret[0].(response.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockUserUseCaseMockRecorder) UpdateEmail(userId, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockUserUseCase)(nil).UpdateEmail), userId, email)
}

// UpdateMobile mocks base method.
func (m *MockUserUseCase) UpdateMobile(id int, mobile string) (response.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMobile", id, mobile)
	ret0, _ := ret[0].(response.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMobile indicates an expected call of UpdateMobile.
func (mr *MockUserUseCaseMockRecorder) UpdateMobile(id, mobile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMobile", reflect.TypeOf((*MockUserUseCase)(nil).UpdateMobile), id, mobile)
}

// UserLogin mocks base method.
func (m *MockUserUseCase) UserLogin(user helperStruct.LoginReq) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserUseCaseMockRecorder) UserLogin(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserUseCase)(nil).UserLogin), user)
}

// UserSignup mocks base method.
func (m *MockUserUseCase) UserSignup(user helperStruct.UserReq) (response.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignup", user)
	ret0, _ := ret[0].(response.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignup indicates an expected call of UserSignup.
func (mr *MockUserUseCaseMockRecorder) UserSignup(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignup", reflect.TypeOf((*MockUserUseCase)(nil).UserSignup), user)
}

// ViewUserProfile mocks base method.
func (m *MockUserUseCase) ViewUserProfile(id int) (response.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewUserProfile", id)
	ret0, _ := ret[0].(response.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewUserProfile indicates an expected call of ViewUserProfile.
func (mr *MockUserUseCaseMockRecorder) ViewUserProfile(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewUserProfile", reflect.TypeOf((*MockUserUseCase)(nil).ViewUserProfile), id)
}
