// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/interface/referral.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReferralUseCase is a mock of ReferralUseCase interface.
type MockReferralUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockReferralUseCaseMockRecorder
}

// MockReferralUseCaseMockRecorder is the mock recorder for MockReferralUseCase.
type MockReferralUseCaseMockRecorder struct {
	mock *MockReferralUseCase
}

// NewMockReferralUseCase creates a new mock instance.
func NewMockReferralUseCase(ctrl *gomock.Controller) *MockReferralUseCase {
	mock := &MockReferralUseCase{ctrl: ctrl}
	mock.recorder = &MockReferralUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReferralUseCase) EXPECT() *MockReferralUseCaseMockRecorder {
	return m.recorder
}

// AddReferral mocks base method.
func (m *MockReferralUseCase) AddReferral(userId int, userMobile string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReferral", userId, userMobile)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReferral indicates an expected call of AddReferral.
func (mr *MockReferralUseCaseMockRecorder) AddReferral(userId, userMobile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReferral", reflect.TypeOf((*MockReferralUseCase)(nil).AddReferral), userId, userMobile)
}

// ReferralOffer mocks base method.
func (m *MockReferralUseCase) ReferralOffer(userId int, referralId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReferralOffer", userId, referralId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReferralOffer indicates an expected call of ReferralOffer.
func (mr *MockReferralUseCaseMockRecorder) ReferralOffer(userId, referralId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReferralOffer", reflect.TypeOf((*MockReferralUseCase)(nil).ReferralOffer), userId, referralId)
}
