// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interfaces/user.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	helperStruct "main.go/internal/common/helperStruct"
	response "main.go/internal/common/response"
	domain "main.go/internal/domain"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddAdress mocks base method.
func (m *MockUserRepository) AddAdress(id int, address helperStruct.Address) (response.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAdress", id, address)
	ret0, _ := ret[0].(response.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddAdress indicates an expected call of AddAdress.
func (mr *MockUserRepositoryMockRecorder) AddAdress(id, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAdress", reflect.TypeOf((*MockUserRepository)(nil).AddAdress), id, address)
}

// ChangePassword mocks base method.
func (m *MockUserRepository) ChangePassword(id int, password helperStruct.UpdatePassword) (response.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", id, password)
	ret0, _ := ret[0].(response.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockUserRepositoryMockRecorder) ChangePassword(id, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockUserRepository)(nil).ChangePassword), id, password)
}

// DeleteAddress mocks base method.
func (m *MockUserRepository) DeleteAddress(addressId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAddress", addressId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAddress indicates an expected call of DeleteAddress.
func (mr *MockUserRepositoryMockRecorder) DeleteAddress(addressId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAddress", reflect.TypeOf((*MockUserRepository)(nil).DeleteAddress), addressId, userId)
}

// ForgotPassword mocks base method.
func (m *MockUserRepository) ForgotPassword(newpassword helperStruct.ForgotPassword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", newpassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockUserRepositoryMockRecorder) ForgotPassword(newpassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockUserRepository)(nil).ForgotPassword), newpassword)
}

// ListAllAddresses mocks base method.
func (m *MockUserRepository) ListAllAddresses(userId int) ([]response.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllAddresses", userId)
	ret0, _ := ret[0].([]response.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllAddresses indicates an expected call of ListAllAddresses.
func (mr *MockUserRepositoryMockRecorder) ListAllAddresses(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllAddresses", reflect.TypeOf((*MockUserRepository)(nil).ListAllAddresses), userId)
}

// RetrieveUserInformation mocks base method.
func (m *MockUserRepository) RetrieveUserInformation(id int) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveUserInformation", id)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveUserInformation indicates an expected call of RetrieveUserInformation.
func (mr *MockUserRepositoryMockRecorder) RetrieveUserInformation(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveUserInformation", reflect.TypeOf((*MockUserRepository)(nil).RetrieveUserInformation), id)
}

// UpdateAddress mocks base method.
func (m *MockUserRepository) UpdateAddress(userId, addressId int, addess helperStruct.Address) (response.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", userId, addressId, addess)
	ret0, _ := ret[0].(response.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockUserRepositoryMockRecorder) UpdateAddress(userId, addressId, addess interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockUserRepository)(nil).UpdateAddress), userId, addressId, addess)
}

// UpdateEmail mocks base method.
func (m *MockUserRepository) UpdateEmail(email string, userId int) (response.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", email, userId)
	ret0, _ := ret[0].(response.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockUserRepositoryMockRecorder) UpdateEmail(email, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockUserRepository)(nil).UpdateEmail), email, userId)
}

// UpdateMobile mocks base method.
func (m *MockUserRepository) UpdateMobile(id int, mobile string) (response.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMobile", id, mobile)
	ret0, _ := ret[0].(response.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMobile indicates an expected call of UpdateMobile.
func (mr *MockUserRepositoryMockRecorder) UpdateMobile(id, mobile interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMobile", reflect.TypeOf((*MockUserRepository)(nil).UpdateMobile), id, mobile)
}

// UserLogin mocks base method.
func (m *MockUserRepository) UserLogin(email string) (domain.Users, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", email)
	ret0, _ := ret[0].(domain.Users)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserRepositoryMockRecorder) UserLogin(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserRepository)(nil).UserLogin), email)
}

// UserSignUp mocks base method.
func (m *MockUserRepository) UserSignUp(user helperStruct.UserReq) (response.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSignUp", user)
	ret0, _ := ret[0].(response.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSignUp indicates an expected call of UserSignUp.
func (mr *MockUserRepositoryMockRecorder) UserSignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSignUp", reflect.TypeOf((*MockUserRepository)(nil).UserSignUp), user)
}

// ViewUserProfile mocks base method.
func (m *MockUserRepository) ViewUserProfile(id int) (response.UserProfile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewUserProfile", id)
	ret0, _ := ret[0].(response.UserProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewUserProfile indicates an expected call of ViewUserProfile.
func (mr *MockUserRepositoryMockRecorder) ViewUserProfile(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewUserProfile", reflect.TypeOf((*MockUserRepository)(nil).ViewUserProfile), id)
}
